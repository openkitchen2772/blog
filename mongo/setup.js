const db = connect('localhost:27017/development');

print("[Posts] Insert initial data ...")

db.posts.insert({ title: '[React] Advantage of React', time: 'Wed Mar 10 2021', content: 'Components are wonderful and React is based on them. You start with small things, which you use to build bigger things, which you use to build apps. Each component has its own logic and controls its own rendering, and can be reused wherever you need them. Code re-use helps make your apps easier to develop and easier to maintain. They also help you implement a consistent look and feel across the whole project. This may be a short description, but using components provides a large advantage in your development efforts.' });
db.posts.insert({ title: '[Investment] Long-term investment', time: 'Wed Mar 3 2021', content: 'A long-term investment is an account on the asset side of a company\'s balance sheet that represents the company\'s investments, including stocks, bonds, real estate, and cash. Long-term investments are assets that a company intends to hold for more than a year.' });
db.posts.insert({ title: '[CSS] CSS onload transition issue on React', time: 'Mon Mar 1 2021', content: 'If youâ€™ve ever used CSS transitions on structural elements on your page, you may have noticed a case where you see that transition happen when the page loads and is laying itself out.' });
db.posts.insert({ title: '[Golang] About panic() and fatal()', time: 'Tue Mar 9 2021', content: 'panic is often used in little programs to just terminate the program once an error appears you don\'t know how to handle or don\'t want to handle. The downside of panic is exactly that: it\'ll terminate the program (mostly, unless you use recover). It\'s generally not good to use panic unless you intend to recover from it or unless something has happened you really can\'t recover from at all nor where you can gracefully terminate the program otherwise. Consider for example an API that offers you functionality but that API secretly has a panic somewhere and you notice that your program terminates in production due to this. Thus, the "outward API" of whatever code you write should recover from panics and return an error instead. The same thing applies to anything that terminates the program.' });

print(db.posts.find())