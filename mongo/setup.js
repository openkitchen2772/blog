const db = connect('localhost:27017/development');

print("[Posts] Insert initial data ...")

db.posts.insert({ title: 'Greeting from Author', time: 'Sat Mar 20 2021', content: '![Greeting Meme](/api/upload/image/greeting_meme.png)\n\n**Welcome to my blog!**\n\n I am William, an application developer from Hong Kong who loves to build big and small application against those interesting topic/idea. It is also inspiring to explore how people are solving our everyday problems & improve human life utilizing the power of computation creatively. This is how I am obsessed with application development, and what makes me enjoy creating application.\n\nAs the FIRST post, I would just like to give a warm greetings and I will be updating this blog like my digital diary, to share different technical issues and solution that I met during any development process, or some other causal writings about my leisure activities.' })
db.posts.insert({ title: '[Devops] Application development in CI/CD pipeline - About this blog', time: 'Mon Mar 22 2021', content: '![devops_toolchain_image](/api/upload/image/devops_toolchain.jpg)\n\nAgile nowaday is a very popular engineering model, and on top of it, it\'s Devops. Devops is a modern combination of software engineering practices, which combined the roles of application development (Dev) and IT operation (Ops) together. This is not only because software development process is often closely related to those operational tasks, like deployment, testing and performance monitoring, Devops way helps automizing and concatenating various development and operation tasks into single pipeline and effectively accelerates the application development cycle.\n\nTo experience more on Devops engineering, I tried to construct a CI/CD pipeline to build this blog application. These tools include Github, Docker, Travis CI and AWS. So, in this article, I would like to share my experience in creating a application, using a automated integration and deployment pipeline. I hope this could act as a quick-start or introduction article and benefit someone who is interested in CI/CD ;)\n\n\n\n# Application Structure\n\n\n\n![blog_structure](/api/upload/image/blog_structure.jpg)\n\n\n\nOne image is better than thousand of words, as shown above, here are the tools used to build up above structure:\n\n\n\n1. Docker : Build source code and create filesystem image, which allows any platform to create and boot our application as containers easily\n\n2. Github : Code repository that provides version control and team collaboration features. It also allows different tools to fetch and work on our application source code\n\n3. AWS Services : Provide set of services for application hosting and maintenance, such as Elasticbeanstalk, IAM and Secret Manager\n\n4. Docker Hub : Docker image repository\n\n5. Travis CI : Continous integration tool that supports Docker environment. This tool can pull our code from github, running our test suite and deploy our application to any hosting service provider, like AWS\n\n\n\n# Project Directory Structure\n\n\n\nAfter we have taken a look on the pipeline big picture, here is the project file structure you may consider: \n\n~~~\n\n[Project Root]\n└─ API   # Go REST API Back-end\n    └─ server.go\n    └─ keys.go\n    └─ Dockerfile\n    └─ Dockerfile.dev\n    └─ model\n      └─ # some entity.go\n    └─ controller\n      └─ # some controller.go\n└─ BLOG\n    └─ App.js\n    └─ Dockerfile\n    └─ Dockerfile.dev\n    └─ components\n       └─ # react stateless component\n    └─ containers\n       └─ # react stateful component\n    └─ # some react code files\n└─ MONGO\n    └─ Dockerfile.dev\n    └─ # mongo db setup.js\n└─ NGINX\n    └─ Dockerfile\n    └─ Dockerfile.dev\n    └─ default.conf\n└─ .travis.yml        # Instruction recipe for Travis CI to run our test suite and deploy our application\n└─ docker-compose.yml # docker-compose.yml is used to quickly setup our local docker development environment\n└─ Dockerrun.aws.json # AWS multi-container application deployment configuration file\n\n~~~\n\nA Dockerfile is a build recipe used by Docker to setup the environment and dependency of our system module. Docker plays an important role when we want to develop CI/CD pipeline because it prepare the ready-to-run images of our modules so that we can ship them to other machines or platform without worrying about system setup and configuration. \n\n\n\n# Docker introduction\n\n\n\nDocker is a platform containing a set of tools used for creating and running containers around. With containers, Docker is able to make software installation really easy without worrying about those installation dependency and configuration.\n\n\n\nImages and containers are two basic elements used by Docker to create and run different software in Docker way. \n\n- **Image** is file that contain all necessary modules and configurations used to build up specific software. \n\n- **Container** is an instance created by Docker using image. It is the place where the software runs as a separate block, with its own resources and memory on our machine.\n\n\n\n# CI/CD pipeline flow\n\n\n\nWith the above structure, let\'s go through the development pipeline flow from end to end.\n\n\n\n1. We program our application in our local machine using Docker\n\n2. Push application code which is ready to build and deploy to GitHub \n\n3. Travis CI watches for the branch that is holding the code used for production deployment, like **master**\n\n4. Travis CI pull code from GitHub upon new code push to **master** branch\n\n5. Travis prepare the Docker environment and build the application for testing (following .travis.yml file)\n\n6. When all test suites passed, Travis CI will prepare the docker images of our application and then push them to the image repository, Docker Hub\n\n7. Travis CI gives signal to any hosting service provider to deploy our application, such as AWS Elasticbeanstalk (EBS)\n\n8. AWS EBS recognizes that there is a new application release, it then pulls image from Docker Hub (using Dockerrun.aws.json file) and finally prepare all necessary AWS resources to deploy and run our application\n\n\n\n# Conclusion\n\n\n\nHere we have taken a bird\'s eye view of an example project structure that implemented a CI/CD tool pipeline to accomplish continuous integration and deployment. This is basically the way and you can now imagine how the route will look like if you are planning to build your next project in Devops fashion.\n\n\n\nThanks for reading and hope you enjoy this article! Surely not all details are covered here but with these concepts in mind, you are now having the trunk and ready to grow those branches. I will also be writing several more articles for each of the pipeline tools mentioned above, to share you my experience on how to operate them :)' })

print(db.posts.find())